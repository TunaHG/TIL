# ";"는 한 라인에 하나의 statement만 존재할 경우 생략이 가능하다.
a = 100
myVar <- 100
result <- myVar + 200
result
print(result)
# 여러 개의 값을 한번에 출력하려면 cat()을 사용
cat(myVar, result)
# 여러 개의 값을 한번에 출력하려면 cat()을 사용
cat("결과값은: ", myVar, result, file = "C:/TIL/R/R_Workspace/R_Lecture/test.txt")
# 작성된 파일에 내용을 추가하고 싶은 경우 append=TRUE를 추가한다.
# R에서는 TRUE, FALSE처럼 대문자로 사용하거나 T, F와 같이 사용한다.
cat("결과값은: ", myVar, result, file = "C:/TIL/R/R_Workspace/R_Lecture/test.txt", append=TRUE)
# 작성된 파일에 내용을 추가하고 싶은 경우 append=TRUE를 추가한다.
# R에서는 TRUE, FALSE처럼 대문자로 사용하거나 T, F와 같이 사용한다.
cat("결과값은: ", myVar, result, file = "C:/TIL/R/R_Workspace/R_Lecture/test.txt", append=TRUE)
# 작성된 파일에 내용을 추가하고 싶은 경우 append=TRUE를 추가한다.
# R에서는 TRUE, FALSE처럼 대문자로 사용하거나 T, F와 같이 사용한다.
cat("결과값은: ", myVar, result, file = "C:/TIL/R/R_Workspace/R_Lecture/test.txt", append=TRUE)
# 기본적인 연산자는 다른 언어와 상당히 유사
var1 <- 100
var2 <- 3
result <- var1 / var2
result # 33.33333 (총 7개의 digit으로 표현 - default)
# 표현되는 digit의 수를 지정한다.
options(digits = 5)
result # 33.333
# C와 Java처럼 format을 이용한 출력도 가능
sprintf("%.8f", result)
result <- var1 %/% var2
result
result <- var1 %% var2
result
# 비교연산 => 다른언어와 동일하다.
var1 <- 100
var2 <- 200
var1 == var2
var1 != var2
# &, && => 의미는 동일하다. (AND 연산)
# |, || => 의미는 동일하다. (OR 연산)
# 하나를 사용할 때와 두개를 사용할때는 Vector인지 Scalar인지에 따라 동작이 다르다.
# &를 이용하면 각 Vector의 Index끼리 연산하여 결과를 Vector로 반환한다.
c(TRUE, FALSE) & c(TRUE, TRUE)
# &&를 이용하면 맨 처음에 있는 요소를 가지고 연산
c(TRUE, FALSE) && c(TRUE, TRUE)
# 4. Inf(Infinite) : 0의 무한대
3 / 0
is.double(var2)
# 어디에 설치됬는지 확인해본다.
.libPaths()
# 4. 반복적인 값을 이용해서 Vector생성
myVar <- rep(1:3, times=3)
myVar
myVar <- rep(1:3, each=3)
myVar
